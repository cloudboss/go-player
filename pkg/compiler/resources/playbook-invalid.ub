name: 'cfer'
description: 'Demo to showcase unobin features'

# Error below: object is missing opening brace.
imports: 
  cfn: 'github.com/cloudboss/unobin/modules/aws/cloudformation.CloudFormation'
  cmd: 'github.com/cloudboss/unobin/modules/command.Command'
}

# The input schema is a JSON schema for validating input variables. The playbook
# will not accept input variables that do not validate.
input-schema: {
  '$id': 'github.com/cloudboss/unobin'
  type: 'object'
  properties: {
    template: {
      type: 'string'
    }
    stack-name: {
      type: 'string'
    }
    proceed: {
      type: 'boolean'
      default: true
    }
  }
  required: [
    'template'
    'stack-name'
  ]
  additionalProperties: false
}

task [show contents of /etc/services] {
  # when-execute() runs its argument and succeeds if the exit status equals 0.
  when: when-execute('true')

  module: cmd
  args: {
    execute: 'cat /etc/services'
  }
}

task [echo the truth] {
  module: cmd
  args: {
    execute: 'echo true'
  }
}

task [run ls command] {
  when: when-execute(out[echo the truth].stdout)

  module: cmd
  args: {
    execute: 'ls /'
  }
}

task [run ls command if file doesn't exist] {
  module: cmd
  args: {
    execute: 'ls /'
    creates: '/'
  }
}

task [echo ls output in a loop] {
  # foreach: out[run ls command].stdout-lines

  module: cmd
  args: {
    execute: 'echo ${item}'
    creates: '/'
  }
}

task [build a cloudformation stack] {
  module: cfn
  args: {
    stack-name: var.stack-name
    template-file: var.template
  }
}

task [run a command from output] {
  module: cmd
  args: {
    execute: 'echo "sg1 is ${out[build a cloudformation stack].outputs.SecurityGroup}"'
  }
}

# Task with rescue and always clauses.
task {
  task [grep passwd file] {
    module: cmd
    args: {
      execute: 'grep -E "^me:" /etc/passwd'
    }
  }
  task [create tempdir] {
    module: cmd
    args: {
      execute: 'mktemp -d'
    }
  }
} rescue {
  task [clean up] {
    module: file
    args: {
      path: out[create tempdir].stdout
      state: 'absent'
    }
  }
} always {
  task [clean up] {
    module: file
    args: {
      path: out[create tempdir].stdout
      state: 'absent'
    }
  }
}

# Task with a rescue clause.
task {
  task [grep passwd file] {
    module: cmd
    args: {
      execute: 'grep -E "^me:" /etc/passwd'
    }
  }
  task [create tempdir] {
    module: cmd
    args: {
      execute: 'mktemp -d'
    }
  }
} rescue {
  task [clean up] {
    module: cmd
    args: {
      path: out[create tempdir].stdout
      state: 'absent'
    }
  }
}

# Task with an always clause.
task {
  task [grep passwd file] {
    module: cmd
    args: {
      execute: 'grep -E "^me:" /etc/passwd'
    }
  }
  task [create tempdir] {
    module: cmd
    args: {
      execute: 'mktemp -d'
    }
  }
} always {
  task [clean up] {
    module: cmd
    args: {
      path: out[create tempdir].stdout
      state: 'absent'
    }
  }
}
