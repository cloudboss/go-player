name: 'cfer'
description: 'Demo to showcase unobin features'

# Imports are modules written in Go. The import keys match the modules in
# tasks. The path to the import is the same as in Go, but with the module
# type appended as a suffix.
imports: {
  cfn: 'github.com/cloudboss/unobin/modules/aws/cloudformation.CloudFormation'
  cmd: 'github.com/cloudboss/unobin/modules/command.Command'
  block: 'github.com/cloudboss/unobin/modules/block.Block'
}

# The input schema is a JSON schema for validating input variables. The playbook
# will not accept input variables that do not validate.
input-schema: {
  '$schema': 'http://json-schema.org/schema#'
  '$id': 'github.com/cloudboss/unobin'
  type: 'object'
  properties: {
    template: {
      type: 'string'
    }
    stack-name: {
      type: 'string'
    }
    proceed: {
      type: 'boolean'
      default: true
    }
  }
  required: [
    'template'
    'stack-name'
  ]
  additionalProperties: false
}

cmd [show contents of /etc/services] {
  execute: 'cat /etc/services'
  # when-execute() runs its argument and succeeds if the exit status equals 0.
  when: when-execute('true')
}

cmd [echo the truth] {
  execute: 'echo true'
}

cmd [run ls command] {
  execute: 'ls /'
  when: when-execute(out[echo the truth].stdout)
}

cmd [run ls command if file doesn't exist] {
  execute: 'ls /'
  creates: '/'
}

cmd [echo ls output in a loop] {
  execute: 'echo ${item}'
  creates: '/'
  foreach: out[run ls command].stdout-lines
}

cfn [build a cloudformation stack] {
  stack-name: var.stack-name
  template-file: var.template
}

cmd [run a command from output] {
  execute: 'echo "sg1 is ${out[build a cloudformation stack].outputs.SecurityGroup}"'
}

# Block without rescue or always clauses.
block {
  when: var.proceed

  cmd [grep passwd file] {
    execute: 'grep -E "^me:" /etc/passwd'
  }
  cmd [create tempdir] {
    execute: 'mktemp -d'
  }
}

# Block with rescue and always clauses.
block {
  cmd [grep passwd file] {
    execute: 'grep -E "^me:" /etc/passwd'
  }
  cmd [create tempdir] {
    execute: 'mktemp -d'
  }
} rescue {
  file [clean up] {
    path: out[create tempdir].stdout
    state: 'absent'
  }
} always {
  file [clean up] {
    path: out[create tempdir].stdout
    state: 'absent'
  }
}

# Block with a rescue clause.
block {
  cmd [grep passwd file] {
    execute: 'grep -E "^me:" /etc/passwd'
  }
  cmd [create tempdir] {
    execute: 'mktemp -d'
  }
} rescue {
  file [clean up] {
    path: out[create tempdir].stdout
    state: 'absent'
  }
}

# Block with an always clause.
block {
  cmd [grep passwd file] {
    execute: 'grep -E "^me:" /etc/passwd'
  }
  cmd [create tempdir] {
    execute: 'mktemp -d'
  }
} always {
  file [clean up] {
    path: out[create tempdir].stdout
    state: 'absent'
  }
}
