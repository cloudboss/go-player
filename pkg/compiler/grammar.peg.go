package compiler

// Code generated by peg grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleentry
	ruleident
	ruleident_chars
	ruleident_char
	rulecomment
	rulespace
	rulenot_newline
	rulenewline
	ruleall_space
	rulealpha
	ruledigit
	rulesentence_char
	rulesentence
	rulestatement
	rulepair
	rulevalue
	ruleindex_expr
	ruleindex_expr_tail
	rulearray
	rulebool_expr
	ruleitem_delim
	rulefun_expr
	rulemath_expr
	rulenumber
	ruleint
	rulefloat
	ruleobject
	rulestring
	rulestring_body
	ruletask
	rulesimple_task
	ruletask_description
	rulecompound_task
	ruletask_pair
	rulewhen_pair
	rulemodule_pair
	ruleargs_pair
	rulerescue_clause
	rulealways_clause
	ruleend
	rulePAIR_DELIM
	ruleDOT
	ruleSTRING_DELIM
	ruleCOMMENT_START
	ruleMINUS
	ruleINDEX_OPEN
	ruleINDEX_CLOSE
	ruleARRAY_OPEN
	ruleARRAY_CLOSE
	ruleGROUP_OPEN
	ruleGROUP_CLOSE
	ruleOBJECT_OPEN
	ruleOBJECT_CLOSE
	ruleTASK
	ruleWHEN
	ruleMODULE
	ruleARGS
	ruleRESCUE
	ruleALWAYS
	ruleTRUE
	ruleFALSE
	ruleEQ
	ruleLT
	ruleGT
	ruleLTE
	ruleGTE
	ruleAND
	ruleOR
)

var rul3s = [...]string{
	"Unknown",
	"entry",
	"ident",
	"ident_chars",
	"ident_char",
	"comment",
	"space",
	"not_newline",
	"newline",
	"all_space",
	"alpha",
	"digit",
	"sentence_char",
	"sentence",
	"statement",
	"pair",
	"value",
	"index_expr",
	"index_expr_tail",
	"array",
	"bool_expr",
	"item_delim",
	"fun_expr",
	"math_expr",
	"number",
	"int",
	"float",
	"object",
	"string",
	"string_body",
	"task",
	"simple_task",
	"task_description",
	"compound_task",
	"task_pair",
	"when_pair",
	"module_pair",
	"args_pair",
	"rescue_clause",
	"always_clause",
	"end",
	"PAIR_DELIM",
	"DOT",
	"STRING_DELIM",
	"COMMENT_START",
	"MINUS",
	"INDEX_OPEN",
	"INDEX_CLOSE",
	"ARRAY_OPEN",
	"ARRAY_CLOSE",
	"GROUP_OPEN",
	"GROUP_CLOSE",
	"OBJECT_OPEN",
	"OBJECT_CLOSE",
	"TASK",
	"WHEN",
	"MODULE",
	"ARGS",
	"RESCUE",
	"ALWAYS",
	"TRUE",
	"FALSE",
	"EQ",
	"LT",
	"GT",
	"LTE",
	"GTE",
	"AND",
	"OR",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[34m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Grammar struct {
	uast *UAST

	Buffer string
	buffer []rune
	rules  [69]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Grammar) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Grammar) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Grammar
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Grammar) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Grammar) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Grammar) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Grammar) error {
	return func(p *Grammar) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Grammar) error {
	return func(p *Grammar) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Grammar) Init(options ...func(*Grammar) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 entry <- <(all_space* statement* end)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					if !_rules[ruleall_space]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
			l4:
				{
					position5, tokenIndex5 := position, tokenIndex
					if !_rules[rulestatement]() {
						goto l5
					}
					goto l4
				l5:
					position, tokenIndex = position5, tokenIndex5
				}
				if !_rules[ruleend]() {
					goto l0
				}
				add(ruleentry, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 ident <- <(ident_chars space*)> */
		func() bool {
			position6, tokenIndex6 := position, tokenIndex
			{
				position7 := position
				if !_rules[ruleident_chars]() {
					goto l6
				}
			l8:
				{
					position9, tokenIndex9 := position, tokenIndex
					if !_rules[rulespace]() {
						goto l9
					}
					goto l8
				l9:
					position, tokenIndex = position9, tokenIndex9
				}
				add(ruleident, position7)
			}
			return true
		l6:
			position, tokenIndex = position6, tokenIndex6
			return false
		},
		/* 2 ident_chars <- <(alpha ident_char*)> */
		func() bool {
			position10, tokenIndex10 := position, tokenIndex
			{
				position11 := position
				if !_rules[rulealpha]() {
					goto l10
				}
			l12:
				{
					position13, tokenIndex13 := position, tokenIndex
					if !_rules[ruleident_char]() {
						goto l13
					}
					goto l12
				l13:
					position, tokenIndex = position13, tokenIndex13
				}
				add(ruleident_chars, position11)
			}
			return true
		l10:
			position, tokenIndex = position10, tokenIndex10
			return false
		},
		/* 3 ident_char <- <(alpha / digit / MINUS)> */
		func() bool {
			position14, tokenIndex14 := position, tokenIndex
			{
				position15 := position
				{
					position16, tokenIndex16 := position, tokenIndex
					if !_rules[rulealpha]() {
						goto l17
					}
					goto l16
				l17:
					position, tokenIndex = position16, tokenIndex16
					if !_rules[ruledigit]() {
						goto l18
					}
					goto l16
				l18:
					position, tokenIndex = position16, tokenIndex16
					if !_rules[ruleMINUS]() {
						goto l14
					}
				}
			l16:
				add(ruleident_char, position15)
			}
			return true
		l14:
			position, tokenIndex = position14, tokenIndex14
			return false
		},
		/* 4 comment <- <(COMMENT_START not_newline* (newline / end))> */
		func() bool {
			position19, tokenIndex19 := position, tokenIndex
			{
				position20 := position
				if !_rules[ruleCOMMENT_START]() {
					goto l19
				}
			l21:
				{
					position22, tokenIndex22 := position, tokenIndex
					if !_rules[rulenot_newline]() {
						goto l22
					}
					goto l21
				l22:
					position, tokenIndex = position22, tokenIndex22
				}
				{
					position23, tokenIndex23 := position, tokenIndex
					if !_rules[rulenewline]() {
						goto l24
					}
					goto l23
				l24:
					position, tokenIndex = position23, tokenIndex23
					if !_rules[ruleend]() {
						goto l19
					}
				}
			l23:
				add(rulecomment, position20)
			}
			return true
		l19:
			position, tokenIndex = position19, tokenIndex19
			return false
		},
		/* 5 space <- <(' ' / '\t')> */
		func() bool {
			position25, tokenIndex25 := position, tokenIndex
			{
				position26 := position
				{
					position27, tokenIndex27 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l28
					}
					position++
					goto l27
				l28:
					position, tokenIndex = position27, tokenIndex27
					if buffer[position] != rune('\t') {
						goto l25
					}
					position++
				}
			l27:
				add(rulespace, position26)
			}
			return true
		l25:
			position, tokenIndex = position25, tokenIndex25
			return false
		},
		/* 6 not_newline <- <(!('\r' / '\n') .)> */
		func() bool {
			position29, tokenIndex29 := position, tokenIndex
			{
				position30 := position
				{
					position31, tokenIndex31 := position, tokenIndex
					{
						position32, tokenIndex32 := position, tokenIndex
						if buffer[position] != rune('\r') {
							goto l33
						}
						position++
						goto l32
					l33:
						position, tokenIndex = position32, tokenIndex32
						if buffer[position] != rune('\n') {
							goto l31
						}
						position++
					}
				l32:
					goto l29
				l31:
					position, tokenIndex = position31, tokenIndex31
				}
				if !matchDot() {
					goto l29
				}
				add(rulenot_newline, position30)
			}
			return true
		l29:
			position, tokenIndex = position29, tokenIndex29
			return false
		},
		/* 7 newline <- <('\r' / '\n')> */
		func() bool {
			position34, tokenIndex34 := position, tokenIndex
			{
				position35 := position
				{
					position36, tokenIndex36 := position, tokenIndex
					if buffer[position] != rune('\r') {
						goto l37
					}
					position++
					goto l36
				l37:
					position, tokenIndex = position36, tokenIndex36
					if buffer[position] != rune('\n') {
						goto l34
					}
					position++
				}
			l36:
				add(rulenewline, position35)
			}
			return true
		l34:
			position, tokenIndex = position34, tokenIndex34
			return false
		},
		/* 8 all_space <- <(space / newline / comment)> */
		func() bool {
			position38, tokenIndex38 := position, tokenIndex
			{
				position39 := position
				{
					position40, tokenIndex40 := position, tokenIndex
					if !_rules[rulespace]() {
						goto l41
					}
					goto l40
				l41:
					position, tokenIndex = position40, tokenIndex40
					if !_rules[rulenewline]() {
						goto l42
					}
					goto l40
				l42:
					position, tokenIndex = position40, tokenIndex40
					if !_rules[rulecomment]() {
						goto l38
					}
				}
			l40:
				add(ruleall_space, position39)
			}
			return true
		l38:
			position, tokenIndex = position38, tokenIndex38
			return false
		},
		/* 9 alpha <- <([A-Z] / [a-z])> */
		func() bool {
			position43, tokenIndex43 := position, tokenIndex
			{
				position44 := position
				{
					position45, tokenIndex45 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l46
					}
					position++
					goto l45
				l46:
					position, tokenIndex = position45, tokenIndex45
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l43
					}
					position++
				}
			l45:
				add(rulealpha, position44)
			}
			return true
		l43:
			position, tokenIndex = position43, tokenIndex43
			return false
		},
		/* 10 digit <- <[0-9]> */
		func() bool {
			position47, tokenIndex47 := position, tokenIndex
			{
				position48 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l47
				}
				position++
				add(ruledigit, position48)
			}
			return true
		l47:
			position, tokenIndex = position47, tokenIndex47
			return false
		},
		/* 11 sentence_char <- <(!(INDEX_CLOSE / all_space) .)> */
		func() bool {
			position49, tokenIndex49 := position, tokenIndex
			{
				position50 := position
				{
					position51, tokenIndex51 := position, tokenIndex
					{
						position52, tokenIndex52 := position, tokenIndex
						if !_rules[ruleINDEX_CLOSE]() {
							goto l53
						}
						goto l52
					l53:
						position, tokenIndex = position52, tokenIndex52
						if !_rules[ruleall_space]() {
							goto l51
						}
					}
				l52:
					goto l49
				l51:
					position, tokenIndex = position51, tokenIndex51
				}
				if !matchDot() {
					goto l49
				}
				add(rulesentence_char, position50)
			}
			return true
		l49:
			position, tokenIndex = position49, tokenIndex49
			return false
		},
		/* 12 sentence <- <(sentence_char+ (space+ sentence_char+)*)> */
		func() bool {
			position54, tokenIndex54 := position, tokenIndex
			{
				position55 := position
				if !_rules[rulesentence_char]() {
					goto l54
				}
			l56:
				{
					position57, tokenIndex57 := position, tokenIndex
					if !_rules[rulesentence_char]() {
						goto l57
					}
					goto l56
				l57:
					position, tokenIndex = position57, tokenIndex57
				}
			l58:
				{
					position59, tokenIndex59 := position, tokenIndex
					if !_rules[rulespace]() {
						goto l59
					}
				l60:
					{
						position61, tokenIndex61 := position, tokenIndex
						if !_rules[rulespace]() {
							goto l61
						}
						goto l60
					l61:
						position, tokenIndex = position61, tokenIndex61
					}
					if !_rules[rulesentence_char]() {
						goto l59
					}
				l62:
					{
						position63, tokenIndex63 := position, tokenIndex
						if !_rules[rulesentence_char]() {
							goto l63
						}
						goto l62
					l63:
						position, tokenIndex = position63, tokenIndex63
					}
					goto l58
				l59:
					position, tokenIndex = position59, tokenIndex59
				}
				add(rulesentence, position55)
			}
			return true
		l54:
			position, tokenIndex = position54, tokenIndex54
			return false
		},
		/* 13 statement <- <(pair / task)> */
		func() bool {
			position64, tokenIndex64 := position, tokenIndex
			{
				position65 := position
				{
					position66, tokenIndex66 := position, tokenIndex
					if !_rules[rulepair]() {
						goto l67
					}
					goto l66
				l67:
					position, tokenIndex = position66, tokenIndex66
					if !_rules[ruletask]() {
						goto l64
					}
				}
			l66:
				add(rulestatement, position65)
			}
			return true
		l64:
			position, tokenIndex = position64, tokenIndex64
			return false
		},
		/* 14 pair <- <((ident / string) PAIR_DELIM value all_space*)> */
		func() bool {
			position68, tokenIndex68 := position, tokenIndex
			{
				position69 := position
				{
					position70, tokenIndex70 := position, tokenIndex
					if !_rules[ruleident]() {
						goto l71
					}
					goto l70
				l71:
					position, tokenIndex = position70, tokenIndex70
					if !_rules[rulestring]() {
						goto l68
					}
				}
			l70:
				if !_rules[rulePAIR_DELIM]() {
					goto l68
				}
				if !_rules[rulevalue]() {
					goto l68
				}
			l72:
				{
					position73, tokenIndex73 := position, tokenIndex
					if !_rules[ruleall_space]() {
						goto l73
					}
					goto l72
				l73:
					position, tokenIndex = position73, tokenIndex73
				}
				add(rulepair, position69)
			}
			return true
		l68:
			position, tokenIndex = position68, tokenIndex68
			return false
		},
		/* 15 value <- <(array / bool_expr / fun_expr / index_expr / math_expr / object / string)> */
		func() bool {
			position74, tokenIndex74 := position, tokenIndex
			{
				position75 := position
				{
					position76, tokenIndex76 := position, tokenIndex
					if !_rules[rulearray]() {
						goto l77
					}
					goto l76
				l77:
					position, tokenIndex = position76, tokenIndex76
					if !_rules[rulebool_expr]() {
						goto l78
					}
					goto l76
				l78:
					position, tokenIndex = position76, tokenIndex76
					if !_rules[rulefun_expr]() {
						goto l79
					}
					goto l76
				l79:
					position, tokenIndex = position76, tokenIndex76
					if !_rules[ruleindex_expr]() {
						goto l80
					}
					goto l76
				l80:
					position, tokenIndex = position76, tokenIndex76
					if !_rules[rulemath_expr]() {
						goto l81
					}
					goto l76
				l81:
					position, tokenIndex = position76, tokenIndex76
					if !_rules[ruleobject]() {
						goto l82
					}
					goto l76
				l82:
					position, tokenIndex = position76, tokenIndex76
					if !_rules[rulestring]() {
						goto l74
					}
				}
			l76:
				add(rulevalue, position75)
			}
			return true
		l74:
			position, tokenIndex = position74, tokenIndex74
			return false
		},
		/* 16 index_expr <- <(ident_chars index_expr_tail+)> */
		func() bool {
			position83, tokenIndex83 := position, tokenIndex
			{
				position84 := position
				if !_rules[ruleident_chars]() {
					goto l83
				}
				if !_rules[ruleindex_expr_tail]() {
					goto l83
				}
			l85:
				{
					position86, tokenIndex86 := position, tokenIndex
					if !_rules[ruleindex_expr_tail]() {
						goto l86
					}
					goto l85
				l86:
					position, tokenIndex = position86, tokenIndex86
				}
				add(ruleindex_expr, position84)
			}
			return true
		l83:
			position, tokenIndex = position83, tokenIndex83
			return false
		},
		/* 17 index_expr_tail <- <((DOT ident_chars) / (INDEX_OPEN sentence INDEX_CLOSE))> */
		func() bool {
			position87, tokenIndex87 := position, tokenIndex
			{
				position88 := position
				{
					position89, tokenIndex89 := position, tokenIndex
					if !_rules[ruleDOT]() {
						goto l90
					}
					if !_rules[ruleident_chars]() {
						goto l90
					}
					goto l89
				l90:
					position, tokenIndex = position89, tokenIndex89
					if !_rules[ruleINDEX_OPEN]() {
						goto l87
					}
					if !_rules[rulesentence]() {
						goto l87
					}
					if !_rules[ruleINDEX_CLOSE]() {
						goto l87
					}
				}
			l89:
				add(ruleindex_expr_tail, position88)
			}
			return true
		l87:
			position, tokenIndex = position87, tokenIndex87
			return false
		},
		/* 18 array <- <(ARRAY_OPEN (value (item_delim value)*)* item_delim ARRAY_CLOSE)> */
		func() bool {
			position91, tokenIndex91 := position, tokenIndex
			{
				position92 := position
				if !_rules[ruleARRAY_OPEN]() {
					goto l91
				}
			l93:
				{
					position94, tokenIndex94 := position, tokenIndex
					if !_rules[rulevalue]() {
						goto l94
					}
				l95:
					{
						position96, tokenIndex96 := position, tokenIndex
						if !_rules[ruleitem_delim]() {
							goto l96
						}
						if !_rules[rulevalue]() {
							goto l96
						}
						goto l95
					l96:
						position, tokenIndex = position96, tokenIndex96
					}
					goto l93
				l94:
					position, tokenIndex = position94, tokenIndex94
				}
				if !_rules[ruleitem_delim]() {
					goto l91
				}
				if !_rules[ruleARRAY_CLOSE]() {
					goto l91
				}
				add(rulearray, position92)
			}
			return true
		l91:
			position, tokenIndex = position91, tokenIndex91
			return false
		},
		/* 19 bool_expr <- <((TRUE / FALSE) all_space*)> */
		func() bool {
			position97, tokenIndex97 := position, tokenIndex
			{
				position98 := position
				{
					position99, tokenIndex99 := position, tokenIndex
					if !_rules[ruleTRUE]() {
						goto l100
					}
					goto l99
				l100:
					position, tokenIndex = position99, tokenIndex99
					if !_rules[ruleFALSE]() {
						goto l97
					}
				}
			l99:
			l101:
				{
					position102, tokenIndex102 := position, tokenIndex
					if !_rules[ruleall_space]() {
						goto l102
					}
					goto l101
				l102:
					position, tokenIndex = position102, tokenIndex102
				}
				add(rulebool_expr, position98)
			}
			return true
		l97:
			position, tokenIndex = position97, tokenIndex97
			return false
		},
		/* 20 item_delim <- <all_space*> */
		func() bool {
			{
				position104 := position
			l105:
				{
					position106, tokenIndex106 := position, tokenIndex
					if !_rules[ruleall_space]() {
						goto l106
					}
					goto l105
				l106:
					position, tokenIndex = position106, tokenIndex106
				}
				add(ruleitem_delim, position104)
			}
			return true
		},
		/* 21 fun_expr <- <(ident GROUP_OPEN (value (item_delim value)*)* item_delim GROUP_CLOSE all_space*)> */
		func() bool {
			position107, tokenIndex107 := position, tokenIndex
			{
				position108 := position
				if !_rules[ruleident]() {
					goto l107
				}
				if !_rules[ruleGROUP_OPEN]() {
					goto l107
				}
			l109:
				{
					position110, tokenIndex110 := position, tokenIndex
					if !_rules[rulevalue]() {
						goto l110
					}
				l111:
					{
						position112, tokenIndex112 := position, tokenIndex
						if !_rules[ruleitem_delim]() {
							goto l112
						}
						if !_rules[rulevalue]() {
							goto l112
						}
						goto l111
					l112:
						position, tokenIndex = position112, tokenIndex112
					}
					goto l109
				l110:
					position, tokenIndex = position110, tokenIndex110
				}
				if !_rules[ruleitem_delim]() {
					goto l107
				}
				if !_rules[ruleGROUP_CLOSE]() {
					goto l107
				}
			l113:
				{
					position114, tokenIndex114 := position, tokenIndex
					if !_rules[ruleall_space]() {
						goto l114
					}
					goto l113
				l114:
					position, tokenIndex = position114, tokenIndex114
				}
				add(rulefun_expr, position108)
			}
			return true
		l107:
			position, tokenIndex = position107, tokenIndex107
			return false
		},
		/* 22 math_expr <- <(number space*)> */
		func() bool {
			position115, tokenIndex115 := position, tokenIndex
			{
				position116 := position
				if !_rules[rulenumber]() {
					goto l115
				}
			l117:
				{
					position118, tokenIndex118 := position, tokenIndex
					if !_rules[rulespace]() {
						goto l118
					}
					goto l117
				l118:
					position, tokenIndex = position118, tokenIndex118
				}
				add(rulemath_expr, position116)
			}
			return true
		l115:
			position, tokenIndex = position115, tokenIndex115
			return false
		},
		/* 23 number <- <(float / int)> */
		func() bool {
			position119, tokenIndex119 := position, tokenIndex
			{
				position120 := position
				{
					position121, tokenIndex121 := position, tokenIndex
					if !_rules[rulefloat]() {
						goto l122
					}
					goto l121
				l122:
					position, tokenIndex = position121, tokenIndex121
					if !_rules[ruleint]() {
						goto l119
					}
				}
			l121:
				add(rulenumber, position120)
			}
			return true
		l119:
			position, tokenIndex = position119, tokenIndex119
			return false
		},
		/* 24 int <- <((MINUS digit+) / digit+)> */
		func() bool {
			position123, tokenIndex123 := position, tokenIndex
			{
				position124 := position
				{
					position125, tokenIndex125 := position, tokenIndex
					if !_rules[ruleMINUS]() {
						goto l126
					}
					if !_rules[ruledigit]() {
						goto l126
					}
				l127:
					{
						position128, tokenIndex128 := position, tokenIndex
						if !_rules[ruledigit]() {
							goto l128
						}
						goto l127
					l128:
						position, tokenIndex = position128, tokenIndex128
					}
					goto l125
				l126:
					position, tokenIndex = position125, tokenIndex125
					if !_rules[ruledigit]() {
						goto l123
					}
				l129:
					{
						position130, tokenIndex130 := position, tokenIndex
						if !_rules[ruledigit]() {
							goto l130
						}
						goto l129
					l130:
						position, tokenIndex = position130, tokenIndex130
					}
				}
			l125:
				add(ruleint, position124)
			}
			return true
		l123:
			position, tokenIndex = position123, tokenIndex123
			return false
		},
		/* 25 float <- <(((MINUS digit+) / digit+) DOT digit+)> */
		func() bool {
			position131, tokenIndex131 := position, tokenIndex
			{
				position132 := position
				{
					position133, tokenIndex133 := position, tokenIndex
					if !_rules[ruleMINUS]() {
						goto l134
					}
					if !_rules[ruledigit]() {
						goto l134
					}
				l135:
					{
						position136, tokenIndex136 := position, tokenIndex
						if !_rules[ruledigit]() {
							goto l136
						}
						goto l135
					l136:
						position, tokenIndex = position136, tokenIndex136
					}
					goto l133
				l134:
					position, tokenIndex = position133, tokenIndex133
					if !_rules[ruledigit]() {
						goto l131
					}
				l137:
					{
						position138, tokenIndex138 := position, tokenIndex
						if !_rules[ruledigit]() {
							goto l138
						}
						goto l137
					l138:
						position, tokenIndex = position138, tokenIndex138
					}
				}
			l133:
				if !_rules[ruleDOT]() {
					goto l131
				}
				if !_rules[ruledigit]() {
					goto l131
				}
			l139:
				{
					position140, tokenIndex140 := position, tokenIndex
					if !_rules[ruledigit]() {
						goto l140
					}
					goto l139
				l140:
					position, tokenIndex = position140, tokenIndex140
				}
				add(rulefloat, position132)
			}
			return true
		l131:
			position, tokenIndex = position131, tokenIndex131
			return false
		},
		/* 26 object <- <(OBJECT_OPEN (pair (item_delim pair)*)* OBJECT_CLOSE)> */
		func() bool {
			position141, tokenIndex141 := position, tokenIndex
			{
				position142 := position
				if !_rules[ruleOBJECT_OPEN]() {
					goto l141
				}
			l143:
				{
					position144, tokenIndex144 := position, tokenIndex
					if !_rules[rulepair]() {
						goto l144
					}
				l145:
					{
						position146, tokenIndex146 := position, tokenIndex
						if !_rules[ruleitem_delim]() {
							goto l146
						}
						if !_rules[rulepair]() {
							goto l146
						}
						goto l145
					l146:
						position, tokenIndex = position146, tokenIndex146
					}
					goto l143
				l144:
					position, tokenIndex = position144, tokenIndex144
				}
				if !_rules[ruleOBJECT_CLOSE]() {
					goto l141
				}
				add(ruleobject, position142)
			}
			return true
		l141:
			position, tokenIndex = position141, tokenIndex141
			return false
		},
		/* 27 string <- <(STRING_DELIM string_body STRING_DELIM space*)> */
		func() bool {
			position147, tokenIndex147 := position, tokenIndex
			{
				position148 := position
				if !_rules[ruleSTRING_DELIM]() {
					goto l147
				}
				if !_rules[rulestring_body]() {
					goto l147
				}
				if !_rules[ruleSTRING_DELIM]() {
					goto l147
				}
			l149:
				{
					position150, tokenIndex150 := position, tokenIndex
					if !_rules[rulespace]() {
						goto l150
					}
					goto l149
				l150:
					position, tokenIndex = position150, tokenIndex150
				}
				add(rulestring, position148)
			}
			return true
		l147:
			position, tokenIndex = position147, tokenIndex147
			return false
		},
		/* 28 string_body <- <(!(STRING_DELIM / newline) .)*> */
		func() bool {
			{
				position152 := position
			l153:
				{
					position154, tokenIndex154 := position, tokenIndex
					{
						position155, tokenIndex155 := position, tokenIndex
						{
							position156, tokenIndex156 := position, tokenIndex
							if !_rules[ruleSTRING_DELIM]() {
								goto l157
							}
							goto l156
						l157:
							position, tokenIndex = position156, tokenIndex156
							if !_rules[rulenewline]() {
								goto l155
							}
						}
					l156:
						goto l154
					l155:
						position, tokenIndex = position155, tokenIndex155
					}
					if !matchDot() {
						goto l154
					}
					goto l153
				l154:
					position, tokenIndex = position154, tokenIndex154
				}
				add(rulestring_body, position152)
			}
			return true
		},
		/* 29 task <- <(simple_task / compound_task)> */
		func() bool {
			position158, tokenIndex158 := position, tokenIndex
			{
				position159 := position
				{
					position160, tokenIndex160 := position, tokenIndex
					if !_rules[rulesimple_task]() {
						goto l161
					}
					goto l160
				l161:
					position, tokenIndex = position160, tokenIndex160
					if !_rules[rulecompound_task]() {
						goto l158
					}
				}
			l160:
				add(ruletask, position159)
			}
			return true
		l158:
			position, tokenIndex = position158, tokenIndex158
			return false
		},
		/* 30 simple_task <- <(TASK task_description OBJECT_OPEN task_pair+ OBJECT_CLOSE rescue_clause? always_clause?)> */
		func() bool {
			position162, tokenIndex162 := position, tokenIndex
			{
				position163 := position
				if !_rules[ruleTASK]() {
					goto l162
				}
				if !_rules[ruletask_description]() {
					goto l162
				}
				if !_rules[ruleOBJECT_OPEN]() {
					goto l162
				}
				if !_rules[ruletask_pair]() {
					goto l162
				}
			l164:
				{
					position165, tokenIndex165 := position, tokenIndex
					if !_rules[ruletask_pair]() {
						goto l165
					}
					goto l164
				l165:
					position, tokenIndex = position165, tokenIndex165
				}
				if !_rules[ruleOBJECT_CLOSE]() {
					goto l162
				}
				{
					position166, tokenIndex166 := position, tokenIndex
					if !_rules[rulerescue_clause]() {
						goto l166
					}
					goto l167
				l166:
					position, tokenIndex = position166, tokenIndex166
				}
			l167:
				{
					position168, tokenIndex168 := position, tokenIndex
					if !_rules[rulealways_clause]() {
						goto l168
					}
					goto l169
				l168:
					position, tokenIndex = position168, tokenIndex168
				}
			l169:
				add(rulesimple_task, position163)
			}
			return true
		l162:
			position, tokenIndex = position162, tokenIndex162
			return false
		},
		/* 31 task_description <- <(INDEX_OPEN sentence INDEX_CLOSE all_space*)> */
		func() bool {
			position170, tokenIndex170 := position, tokenIndex
			{
				position171 := position
				if !_rules[ruleINDEX_OPEN]() {
					goto l170
				}
				if !_rules[rulesentence]() {
					goto l170
				}
				if !_rules[ruleINDEX_CLOSE]() {
					goto l170
				}
			l172:
				{
					position173, tokenIndex173 := position, tokenIndex
					if !_rules[ruleall_space]() {
						goto l173
					}
					goto l172
				l173:
					position, tokenIndex = position173, tokenIndex173
				}
				add(ruletask_description, position171)
			}
			return true
		l170:
			position, tokenIndex = position170, tokenIndex170
			return false
		},
		/* 32 compound_task <- <(TASK OBJECT_OPEN when_pair* task+ OBJECT_CLOSE rescue_clause? always_clause?)> */
		func() bool {
			position174, tokenIndex174 := position, tokenIndex
			{
				position175 := position
				if !_rules[ruleTASK]() {
					goto l174
				}
				if !_rules[ruleOBJECT_OPEN]() {
					goto l174
				}
			l176:
				{
					position177, tokenIndex177 := position, tokenIndex
					if !_rules[rulewhen_pair]() {
						goto l177
					}
					goto l176
				l177:
					position, tokenIndex = position177, tokenIndex177
				}
				if !_rules[ruletask]() {
					goto l174
				}
			l178:
				{
					position179, tokenIndex179 := position, tokenIndex
					if !_rules[ruletask]() {
						goto l179
					}
					goto l178
				l179:
					position, tokenIndex = position179, tokenIndex179
				}
				if !_rules[ruleOBJECT_CLOSE]() {
					goto l174
				}
				{
					position180, tokenIndex180 := position, tokenIndex
					if !_rules[rulerescue_clause]() {
						goto l180
					}
					goto l181
				l180:
					position, tokenIndex = position180, tokenIndex180
				}
			l181:
				{
					position182, tokenIndex182 := position, tokenIndex
					if !_rules[rulealways_clause]() {
						goto l182
					}
					goto l183
				l182:
					position, tokenIndex = position182, tokenIndex182
				}
			l183:
				add(rulecompound_task, position175)
			}
			return true
		l174:
			position, tokenIndex = position174, tokenIndex174
			return false
		},
		/* 33 task_pair <- <(when_pair / module_pair / args_pair)> */
		func() bool {
			position184, tokenIndex184 := position, tokenIndex
			{
				position185 := position
				{
					position186, tokenIndex186 := position, tokenIndex
					if !_rules[rulewhen_pair]() {
						goto l187
					}
					goto l186
				l187:
					position, tokenIndex = position186, tokenIndex186
					if !_rules[rulemodule_pair]() {
						goto l188
					}
					goto l186
				l188:
					position, tokenIndex = position186, tokenIndex186
					if !_rules[ruleargs_pair]() {
						goto l184
					}
				}
			l186:
				add(ruletask_pair, position185)
			}
			return true
		l184:
			position, tokenIndex = position184, tokenIndex184
			return false
		},
		/* 34 when_pair <- <(WHEN PAIR_DELIM fun_expr)> */
		func() bool {
			position189, tokenIndex189 := position, tokenIndex
			{
				position190 := position
				if !_rules[ruleWHEN]() {
					goto l189
				}
				if !_rules[rulePAIR_DELIM]() {
					goto l189
				}
				if !_rules[rulefun_expr]() {
					goto l189
				}
				add(rulewhen_pair, position190)
			}
			return true
		l189:
			position, tokenIndex = position189, tokenIndex189
			return false
		},
		/* 35 module_pair <- <(MODULE PAIR_DELIM ident all_space*)> */
		func() bool {
			position191, tokenIndex191 := position, tokenIndex
			{
				position192 := position
				if !_rules[ruleMODULE]() {
					goto l191
				}
				if !_rules[rulePAIR_DELIM]() {
					goto l191
				}
				if !_rules[ruleident]() {
					goto l191
				}
			l193:
				{
					position194, tokenIndex194 := position, tokenIndex
					if !_rules[ruleall_space]() {
						goto l194
					}
					goto l193
				l194:
					position, tokenIndex = position194, tokenIndex194
				}
				add(rulemodule_pair, position192)
			}
			return true
		l191:
			position, tokenIndex = position191, tokenIndex191
			return false
		},
		/* 36 args_pair <- <(ARGS PAIR_DELIM object)> */
		func() bool {
			position195, tokenIndex195 := position, tokenIndex
			{
				position196 := position
				if !_rules[ruleARGS]() {
					goto l195
				}
				if !_rules[rulePAIR_DELIM]() {
					goto l195
				}
				if !_rules[ruleobject]() {
					goto l195
				}
				add(ruleargs_pair, position196)
			}
			return true
		l195:
			position, tokenIndex = position195, tokenIndex195
			return false
		},
		/* 37 rescue_clause <- <(RESCUE OBJECT_OPEN task+ OBJECT_CLOSE)> */
		func() bool {
			position197, tokenIndex197 := position, tokenIndex
			{
				position198 := position
				if !_rules[ruleRESCUE]() {
					goto l197
				}
				if !_rules[ruleOBJECT_OPEN]() {
					goto l197
				}
				if !_rules[ruletask]() {
					goto l197
				}
			l199:
				{
					position200, tokenIndex200 := position, tokenIndex
					if !_rules[ruletask]() {
						goto l200
					}
					goto l199
				l200:
					position, tokenIndex = position200, tokenIndex200
				}
				if !_rules[ruleOBJECT_CLOSE]() {
					goto l197
				}
				add(rulerescue_clause, position198)
			}
			return true
		l197:
			position, tokenIndex = position197, tokenIndex197
			return false
		},
		/* 38 always_clause <- <(ALWAYS OBJECT_OPEN task+ OBJECT_CLOSE)> */
		func() bool {
			position201, tokenIndex201 := position, tokenIndex
			{
				position202 := position
				if !_rules[ruleALWAYS]() {
					goto l201
				}
				if !_rules[ruleOBJECT_OPEN]() {
					goto l201
				}
				if !_rules[ruletask]() {
					goto l201
				}
			l203:
				{
					position204, tokenIndex204 := position, tokenIndex
					if !_rules[ruletask]() {
						goto l204
					}
					goto l203
				l204:
					position, tokenIndex = position204, tokenIndex204
				}
				if !_rules[ruleOBJECT_CLOSE]() {
					goto l201
				}
				add(rulealways_clause, position202)
			}
			return true
		l201:
			position, tokenIndex = position201, tokenIndex201
			return false
		},
		/* 39 end <- <!.> */
		func() bool {
			position205, tokenIndex205 := position, tokenIndex
			{
				position206 := position
				{
					position207, tokenIndex207 := position, tokenIndex
					if !matchDot() {
						goto l207
					}
					goto l205
				l207:
					position, tokenIndex = position207, tokenIndex207
				}
				add(ruleend, position206)
			}
			return true
		l205:
			position, tokenIndex = position205, tokenIndex205
			return false
		},
		/* 40 PAIR_DELIM <- <(':' space*)> */
		func() bool {
			position208, tokenIndex208 := position, tokenIndex
			{
				position209 := position
				if buffer[position] != rune(':') {
					goto l208
				}
				position++
			l210:
				{
					position211, tokenIndex211 := position, tokenIndex
					if !_rules[rulespace]() {
						goto l211
					}
					goto l210
				l211:
					position, tokenIndex = position211, tokenIndex211
				}
				add(rulePAIR_DELIM, position209)
			}
			return true
		l208:
			position, tokenIndex = position208, tokenIndex208
			return false
		},
		/* 41 DOT <- <'.'> */
		func() bool {
			position212, tokenIndex212 := position, tokenIndex
			{
				position213 := position
				if buffer[position] != rune('.') {
					goto l212
				}
				position++
				add(ruleDOT, position213)
			}
			return true
		l212:
			position, tokenIndex = position212, tokenIndex212
			return false
		},
		/* 42 STRING_DELIM <- <'\''> */
		func() bool {
			position214, tokenIndex214 := position, tokenIndex
			{
				position215 := position
				if buffer[position] != rune('\'') {
					goto l214
				}
				position++
				add(ruleSTRING_DELIM, position215)
			}
			return true
		l214:
			position, tokenIndex = position214, tokenIndex214
			return false
		},
		/* 43 COMMENT_START <- <'#'> */
		func() bool {
			position216, tokenIndex216 := position, tokenIndex
			{
				position217 := position
				if buffer[position] != rune('#') {
					goto l216
				}
				position++
				add(ruleCOMMENT_START, position217)
			}
			return true
		l216:
			position, tokenIndex = position216, tokenIndex216
			return false
		},
		/* 44 MINUS <- <'-'> */
		func() bool {
			position218, tokenIndex218 := position, tokenIndex
			{
				position219 := position
				if buffer[position] != rune('-') {
					goto l218
				}
				position++
				add(ruleMINUS, position219)
			}
			return true
		l218:
			position, tokenIndex = position218, tokenIndex218
			return false
		},
		/* 45 INDEX_OPEN <- <'['> */
		func() bool {
			position220, tokenIndex220 := position, tokenIndex
			{
				position221 := position
				if buffer[position] != rune('[') {
					goto l220
				}
				position++
				add(ruleINDEX_OPEN, position221)
			}
			return true
		l220:
			position, tokenIndex = position220, tokenIndex220
			return false
		},
		/* 46 INDEX_CLOSE <- <']'> */
		func() bool {
			position222, tokenIndex222 := position, tokenIndex
			{
				position223 := position
				if buffer[position] != rune(']') {
					goto l222
				}
				position++
				add(ruleINDEX_CLOSE, position223)
			}
			return true
		l222:
			position, tokenIndex = position222, tokenIndex222
			return false
		},
		/* 47 ARRAY_OPEN <- <('[' all_space*)> */
		func() bool {
			position224, tokenIndex224 := position, tokenIndex
			{
				position225 := position
				if buffer[position] != rune('[') {
					goto l224
				}
				position++
			l226:
				{
					position227, tokenIndex227 := position, tokenIndex
					if !_rules[ruleall_space]() {
						goto l227
					}
					goto l226
				l227:
					position, tokenIndex = position227, tokenIndex227
				}
				add(ruleARRAY_OPEN, position225)
			}
			return true
		l224:
			position, tokenIndex = position224, tokenIndex224
			return false
		},
		/* 48 ARRAY_CLOSE <- <(']' all_space*)> */
		func() bool {
			position228, tokenIndex228 := position, tokenIndex
			{
				position229 := position
				if buffer[position] != rune(']') {
					goto l228
				}
				position++
			l230:
				{
					position231, tokenIndex231 := position, tokenIndex
					if !_rules[ruleall_space]() {
						goto l231
					}
					goto l230
				l231:
					position, tokenIndex = position231, tokenIndex231
				}
				add(ruleARRAY_CLOSE, position229)
			}
			return true
		l228:
			position, tokenIndex = position228, tokenIndex228
			return false
		},
		/* 49 GROUP_OPEN <- <('(' all_space*)> */
		func() bool {
			position232, tokenIndex232 := position, tokenIndex
			{
				position233 := position
				if buffer[position] != rune('(') {
					goto l232
				}
				position++
			l234:
				{
					position235, tokenIndex235 := position, tokenIndex
					if !_rules[ruleall_space]() {
						goto l235
					}
					goto l234
				l235:
					position, tokenIndex = position235, tokenIndex235
				}
				add(ruleGROUP_OPEN, position233)
			}
			return true
		l232:
			position, tokenIndex = position232, tokenIndex232
			return false
		},
		/* 50 GROUP_CLOSE <- <(')' all_space*)> */
		func() bool {
			position236, tokenIndex236 := position, tokenIndex
			{
				position237 := position
				if buffer[position] != rune(')') {
					goto l236
				}
				position++
			l238:
				{
					position239, tokenIndex239 := position, tokenIndex
					if !_rules[ruleall_space]() {
						goto l239
					}
					goto l238
				l239:
					position, tokenIndex = position239, tokenIndex239
				}
				add(ruleGROUP_CLOSE, position237)
			}
			return true
		l236:
			position, tokenIndex = position236, tokenIndex236
			return false
		},
		/* 51 OBJECT_OPEN <- <('{' all_space*)> */
		func() bool {
			position240, tokenIndex240 := position, tokenIndex
			{
				position241 := position
				if buffer[position] != rune('{') {
					goto l240
				}
				position++
			l242:
				{
					position243, tokenIndex243 := position, tokenIndex
					if !_rules[ruleall_space]() {
						goto l243
					}
					goto l242
				l243:
					position, tokenIndex = position243, tokenIndex243
				}
				add(ruleOBJECT_OPEN, position241)
			}
			return true
		l240:
			position, tokenIndex = position240, tokenIndex240
			return false
		},
		/* 52 OBJECT_CLOSE <- <('}' all_space*)> */
		func() bool {
			position244, tokenIndex244 := position, tokenIndex
			{
				position245 := position
				if buffer[position] != rune('}') {
					goto l244
				}
				position++
			l246:
				{
					position247, tokenIndex247 := position, tokenIndex
					if !_rules[ruleall_space]() {
						goto l247
					}
					goto l246
				l247:
					position, tokenIndex = position247, tokenIndex247
				}
				add(ruleOBJECT_CLOSE, position245)
			}
			return true
		l244:
			position, tokenIndex = position244, tokenIndex244
			return false
		},
		/* 53 TASK <- <('t' 'a' 's' 'k' !alpha all_space*)> */
		func() bool {
			position248, tokenIndex248 := position, tokenIndex
			{
				position249 := position
				if buffer[position] != rune('t') {
					goto l248
				}
				position++
				if buffer[position] != rune('a') {
					goto l248
				}
				position++
				if buffer[position] != rune('s') {
					goto l248
				}
				position++
				if buffer[position] != rune('k') {
					goto l248
				}
				position++
				{
					position250, tokenIndex250 := position, tokenIndex
					if !_rules[rulealpha]() {
						goto l250
					}
					goto l248
				l250:
					position, tokenIndex = position250, tokenIndex250
				}
			l251:
				{
					position252, tokenIndex252 := position, tokenIndex
					if !_rules[ruleall_space]() {
						goto l252
					}
					goto l251
				l252:
					position, tokenIndex = position252, tokenIndex252
				}
				add(ruleTASK, position249)
			}
			return true
		l248:
			position, tokenIndex = position248, tokenIndex248
			return false
		},
		/* 54 WHEN <- <('w' 'h' 'e' 'n' !alpha all_space*)> */
		func() bool {
			position253, tokenIndex253 := position, tokenIndex
			{
				position254 := position
				if buffer[position] != rune('w') {
					goto l253
				}
				position++
				if buffer[position] != rune('h') {
					goto l253
				}
				position++
				if buffer[position] != rune('e') {
					goto l253
				}
				position++
				if buffer[position] != rune('n') {
					goto l253
				}
				position++
				{
					position255, tokenIndex255 := position, tokenIndex
					if !_rules[rulealpha]() {
						goto l255
					}
					goto l253
				l255:
					position, tokenIndex = position255, tokenIndex255
				}
			l256:
				{
					position257, tokenIndex257 := position, tokenIndex
					if !_rules[ruleall_space]() {
						goto l257
					}
					goto l256
				l257:
					position, tokenIndex = position257, tokenIndex257
				}
				add(ruleWHEN, position254)
			}
			return true
		l253:
			position, tokenIndex = position253, tokenIndex253
			return false
		},
		/* 55 MODULE <- <('m' 'o' 'd' 'u' 'l' 'e' !alpha all_space*)> */
		func() bool {
			position258, tokenIndex258 := position, tokenIndex
			{
				position259 := position
				if buffer[position] != rune('m') {
					goto l258
				}
				position++
				if buffer[position] != rune('o') {
					goto l258
				}
				position++
				if buffer[position] != rune('d') {
					goto l258
				}
				position++
				if buffer[position] != rune('u') {
					goto l258
				}
				position++
				if buffer[position] != rune('l') {
					goto l258
				}
				position++
				if buffer[position] != rune('e') {
					goto l258
				}
				position++
				{
					position260, tokenIndex260 := position, tokenIndex
					if !_rules[rulealpha]() {
						goto l260
					}
					goto l258
				l260:
					position, tokenIndex = position260, tokenIndex260
				}
			l261:
				{
					position262, tokenIndex262 := position, tokenIndex
					if !_rules[ruleall_space]() {
						goto l262
					}
					goto l261
				l262:
					position, tokenIndex = position262, tokenIndex262
				}
				add(ruleMODULE, position259)
			}
			return true
		l258:
			position, tokenIndex = position258, tokenIndex258
			return false
		},
		/* 56 ARGS <- <('a' 'r' 'g' 's' !alpha all_space*)> */
		func() bool {
			position263, tokenIndex263 := position, tokenIndex
			{
				position264 := position
				if buffer[position] != rune('a') {
					goto l263
				}
				position++
				if buffer[position] != rune('r') {
					goto l263
				}
				position++
				if buffer[position] != rune('g') {
					goto l263
				}
				position++
				if buffer[position] != rune('s') {
					goto l263
				}
				position++
				{
					position265, tokenIndex265 := position, tokenIndex
					if !_rules[rulealpha]() {
						goto l265
					}
					goto l263
				l265:
					position, tokenIndex = position265, tokenIndex265
				}
			l266:
				{
					position267, tokenIndex267 := position, tokenIndex
					if !_rules[ruleall_space]() {
						goto l267
					}
					goto l266
				l267:
					position, tokenIndex = position267, tokenIndex267
				}
				add(ruleARGS, position264)
			}
			return true
		l263:
			position, tokenIndex = position263, tokenIndex263
			return false
		},
		/* 57 RESCUE <- <('r' 'e' 's' 'c' 'u' 'e' !alpha all_space*)> */
		func() bool {
			position268, tokenIndex268 := position, tokenIndex
			{
				position269 := position
				if buffer[position] != rune('r') {
					goto l268
				}
				position++
				if buffer[position] != rune('e') {
					goto l268
				}
				position++
				if buffer[position] != rune('s') {
					goto l268
				}
				position++
				if buffer[position] != rune('c') {
					goto l268
				}
				position++
				if buffer[position] != rune('u') {
					goto l268
				}
				position++
				if buffer[position] != rune('e') {
					goto l268
				}
				position++
				{
					position270, tokenIndex270 := position, tokenIndex
					if !_rules[rulealpha]() {
						goto l270
					}
					goto l268
				l270:
					position, tokenIndex = position270, tokenIndex270
				}
			l271:
				{
					position272, tokenIndex272 := position, tokenIndex
					if !_rules[ruleall_space]() {
						goto l272
					}
					goto l271
				l272:
					position, tokenIndex = position272, tokenIndex272
				}
				add(ruleRESCUE, position269)
			}
			return true
		l268:
			position, tokenIndex = position268, tokenIndex268
			return false
		},
		/* 58 ALWAYS <- <('a' 'l' 'w' 'a' 'y' 's' !alpha all_space*)> */
		func() bool {
			position273, tokenIndex273 := position, tokenIndex
			{
				position274 := position
				if buffer[position] != rune('a') {
					goto l273
				}
				position++
				if buffer[position] != rune('l') {
					goto l273
				}
				position++
				if buffer[position] != rune('w') {
					goto l273
				}
				position++
				if buffer[position] != rune('a') {
					goto l273
				}
				position++
				if buffer[position] != rune('y') {
					goto l273
				}
				position++
				if buffer[position] != rune('s') {
					goto l273
				}
				position++
				{
					position275, tokenIndex275 := position, tokenIndex
					if !_rules[rulealpha]() {
						goto l275
					}
					goto l273
				l275:
					position, tokenIndex = position275, tokenIndex275
				}
			l276:
				{
					position277, tokenIndex277 := position, tokenIndex
					if !_rules[ruleall_space]() {
						goto l277
					}
					goto l276
				l277:
					position, tokenIndex = position277, tokenIndex277
				}
				add(ruleALWAYS, position274)
			}
			return true
		l273:
			position, tokenIndex = position273, tokenIndex273
			return false
		},
		/* 59 TRUE <- <('t' 'r' 'u' 'e' !alpha)> */
		func() bool {
			position278, tokenIndex278 := position, tokenIndex
			{
				position279 := position
				if buffer[position] != rune('t') {
					goto l278
				}
				position++
				if buffer[position] != rune('r') {
					goto l278
				}
				position++
				if buffer[position] != rune('u') {
					goto l278
				}
				position++
				if buffer[position] != rune('e') {
					goto l278
				}
				position++
				{
					position280, tokenIndex280 := position, tokenIndex
					if !_rules[rulealpha]() {
						goto l280
					}
					goto l278
				l280:
					position, tokenIndex = position280, tokenIndex280
				}
				add(ruleTRUE, position279)
			}
			return true
		l278:
			position, tokenIndex = position278, tokenIndex278
			return false
		},
		/* 60 FALSE <- <('f' 'a' 'l' 's' 'e' !alpha)> */
		func() bool {
			position281, tokenIndex281 := position, tokenIndex
			{
				position282 := position
				if buffer[position] != rune('f') {
					goto l281
				}
				position++
				if buffer[position] != rune('a') {
					goto l281
				}
				position++
				if buffer[position] != rune('l') {
					goto l281
				}
				position++
				if buffer[position] != rune('s') {
					goto l281
				}
				position++
				if buffer[position] != rune('e') {
					goto l281
				}
				position++
				{
					position283, tokenIndex283 := position, tokenIndex
					if !_rules[rulealpha]() {
						goto l283
					}
					goto l281
				l283:
					position, tokenIndex = position283, tokenIndex283
				}
				add(ruleFALSE, position282)
			}
			return true
		l281:
			position, tokenIndex = position281, tokenIndex281
			return false
		},
		/* 61 EQ <- <('=' '=' all_space*)> */
		nil,
		/* 62 LT <- <('<' all_space*)> */
		nil,
		/* 63 GT <- <('>' all_space*)> */
		nil,
		/* 64 LTE <- <('<' '=' all_space*)> */
		nil,
		/* 65 GTE <- <('>' '=' all_space*)> */
		nil,
		/* 66 AND <- <('&' '&' all_space*)> */
		nil,
		/* 67 OR <- <('|' '|' all_space*)> */
		nil,
	}
	p.rules = _rules
	return nil
}
