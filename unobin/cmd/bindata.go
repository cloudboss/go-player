// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package cmd generated by go-bindata.// sources:
// cmd/templates/go.mod
// cmd/templates/playbook.ub
// cmd/templates/resources/hello.txt.tmpl
package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goMod = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcd\x4f\x29\xcd\x49\x55\xa8\xae\x56\xd0\xf3\xcc\x2d\xc8\x2f\x2a\x09\x48\x2c\xc9\x50\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xc8\x9d\xfe\x34\x19\x00\x00\x00")

func goModBytes() ([]byte, error) {
	return bindataRead(
		_goMod,
		"go.mod",
	)
}

func goMod() (*asset, error) {
	bytes, err := goModBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go.mod", size: 25, mode: os.FileMode(420), modTime: time.Unix(71884800, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _playbookUb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x6f\xdc\x36\x10\xbd\xeb\x57\x8c\xb1\x08\x68\x03\xb6\x36\x87\xa0\x87\xbd\x05\x39\x34\xed\x21\x09\x90\xdc\x82\xa0\xa0\xa8\x91\xc5\x9a\x22\x15\xce\x70\x3f\x62\xec\x7f\x2f\xf8\xa1\xb5\xe4\x8f\xda\x69\x7a\x48\xbc\xa6\x87\x6f\xde\x3c\xbe\x99\x59\x2b\x07\xdc\x80\xb8\xbd\x85\xfa\x93\x77\x7f\xa3\x62\x38\x1e\x45\xd5\x22\x29\xaf\x47\xd6\xce\x6e\x40\xbc\x85\x46\x5b\xe9\x0f\x30\x1a\x79\x68\x9c\xbb\x11\x55\xb5\x82\x3f\x86\xd1\x79\x26\x90\x1e\x61\x70\x6d\x30\x48\xb0\xf3\x9a\x19\x2d\x68\x0b\xbf\xbb\x1a\xbe\xf4\x08\x3a\x85\xc1\x0d\x1e\x08\x06\xc9\xaa\x07\xee\xef\x2e\x68\x5b\xad\x80\x25\xdd\x50\x8e\x1e\x25\xf7\xc0\x2e\xc5\x94\x9b\x9a\xd2\x6f\x24\x07\x04\x49\x19\xfa\x12\x9a\xc0\xb0\xd3\x3c\x47\x8b\x48\x87\x11\x41\x8e\x23\xda\x16\xdb\x18\x2d\x81\x42\xd7\xe9\x7d\x5d\x65\x34\xda\xc0\x6d\x05\xa0\x86\x76\x03\xe2\x5a\x73\x1f\x9a\x5a\xb9\x61\xad\x8c\x0b\x6d\xe3\x88\xd6\xc1\xba\x46\xdb\x75\x21\xb8\x56\x6e\x18\xa4\x6d\xeb\x77\xf9\xa7\xa8\x00\x18\x87\xd1\x48\xc6\x17\x22\x74\xda\xe0\x7a\xba\x53\x7f\x29\x1f\x44\x75\x8c\x22\x26\x85\xec\x18\x18\x48\xf5\x38\xc8\x58\xad\x84\x3f\x3f\x7f\xfc\x30\x1d\x74\xce\xc3\x56\x1a\xdd\x4a\xd6\xf6\xba\x04\x6f\xa5\xd7\xb2\x31\x38\xa9\x56\xde\xa5\x5a\xc1\x4e\x1b\x03\xd6\x31\x48\xa5\x70\xe4\xfb\xf1\xc0\xbd\x64\x68\x5d\x0a\x29\xb0\x58\x57\x29\xea\x2a\x67\xcc\x0a\x45\x25\x37\x20\x5c\x13\x3d\x11\xab\x1e\xbd\x1b\xd1\xb3\xc6\x22\x21\x40\xf6\xce\xed\x14\x4a\xec\xb5\xbd\x16\x70\xac\x20\xfd\xf3\xf8\x3d\x68\x8f\xed\x06\xbe\x8a\x18\x2a\xbe\x55\x00\xb2\x6d\x75\x74\x95\x34\x9f\x66\x78\x9d\x34\x84\x51\x90\xe8\x04\xf8\xda\xa3\x31\x0e\x3a\xef\x06\x90\xf6\x5e\x05\x67\xdf\x52\xf6\x15\xec\x7a\xb4\x57\xb8\x47\x15\x18\xcf\x2f\xc0\x07\x4b\xa0\x93\x1d\xaf\xc3\x80\x96\x41\xda\x16\x28\x28\x85\xd8\x12\xe8\x2e\x19\x05\xf7\x9a\x81\x58\x72\x20\xc0\xef\x41\x1a\x82\xd7\x75\x05\x09\x6c\xb3\x84\x14\xec\x03\x8a\x8b\x2a\x25\x8b\x22\xc7\x1a\xc0\x75\x33\xc3\x5d\x46\x1f\x5d\xc2\x10\x88\x8b\xb5\x9d\x3d\x85\xcc\x7c\x1f\x33\xe4\x1b\x9b\x78\xe3\x84\xd8\x39\x3f\x48\x86\x2e\x58\x15\x35\x81\x06\x7b\xb9\x45\x02\xa3\x6f\x10\x68\xf4\xda\x72\x17\xef\x4a\x7f\x1d\x45\x87\x42\x6d\x53\x2e\x9e\x0b\x54\xbd\x83\xf7\x49\xad\x57\x74\x26\x40\xda\xc3\xd5\x56\xfa\xf3\xac\xf7\xc5\x05\x1c\xef\x44\x4d\xb1\x91\x18\xfb\xc0\x7d\x56\xf1\x31\x52\x2e\x70\xd4\x3b\x55\xa1\x09\x8a\xff\xb3\xaf\x1a\x84\x40\xb9\xb1\xf8\x64\x5c\x76\x49\xb8\xbf\x0a\xbb\x04\xa4\x6d\x0a\xb0\xb8\xe7\xd4\xdd\x8f\x56\x91\xe9\x27\x99\xe7\x44\x7d\xb0\x60\x4e\x89\xa7\xe7\x7e\x8f\x1e\x2f\xef\x3f\x7a\x20\xcc\x4c\xc4\xb2\x3a\x91\x92\x96\x52\x04\x25\x00\x41\xdc\xba\xc0\x02\x24\xb3\xd7\x4d\x60\xcc\xf3\x61\x2a\x90\x5d\xf4\xd0\x13\x66\xc8\xde\xbe\xca\x80\xe7\x0f\xb2\x4d\xd8\x17\xc9\x2e\x4b\x55\x1f\x96\x6d\x08\xd6\xff\x52\x71\xf4\x6a\x9c\x19\xd0\x3a\x24\x2b\x38\x9a\x96\xf8\xb1\x07\x2b\xd0\xa9\x19\xef\xc1\xa7\xb3\xf8\xa0\x9a\xca\x48\xc0\x2d\xfa\x58\x21\x90\xb6\x0a\x61\x0d\xd2\xec\xe4\x81\x32\x7a\xb2\x28\x80\xf2\x28\x39\x36\xa4\x48\x08\xf7\x28\xde\x69\x15\x28\x8e\x22\x69\x1d\xf7\xe8\xa7\x53\x41\x45\xf0\x17\x53\x5d\xd8\xf8\xe3\xc9\x77\x73\x29\x68\x03\xaf\x28\x1b\x7b\x12\x7f\xa9\xd6\x42\xfc\x05\x65\xdc\x8f\x11\x42\x9e\xe6\xf5\x92\xd7\x74\x7a\x8f\xdc\x0a\xc8\xab\x38\x85\x3d\x1a\xc9\x7a\x8b\xd3\x36\x3a\xed\xbe\xf8\x27\x72\xc1\x2b\x24\x68\xb5\x47\xc5\xce\x1f\xb2\x7e\xe4\xd5\x06\x44\x1a\x5f\x35\xef\xb9\xe6\x61\x34\xd3\x53\xb4\x48\xfc\x18\xae\x0a\xde\xc7\x71\xb5\x73\xfe\x26\xaa\x7a\x82\x04\xe7\xe3\xf8\x93\x0d\x39\x13\xdd\x1a\x57\x63\x4e\x13\xa1\xe6\x79\x72\x8a\xc1\xb5\xf1\xf9\x5f\xff\xf6\xe6\x4d\x3e\xd8\x4a\x9f\x9c\x97\xe7\x74\xb1\xf0\x6c\x3c\x94\x49\x9d\xf6\xd0\x67\x3d\x8c\x06\x73\xdb\xa4\xb5\xea\x91\x54\xc0\x34\x44\x8b\x51\x94\x91\xb1\xdf\xea\x6a\x05\x6f\x81\x66\xf1\x7d\xea\xa3\xac\x6b\xbe\xe0\xaf\x29\x7d\xb0\x0e\x28\x34\x69\xbd\x4f\x23\x61\x90\xda\x42\xe3\xda\x43\x3d\x39\xab\x24\x82\x4e\x6a\x13\x3c\x3e\x35\x99\x26\x23\x17\x36\x1e\x39\x78\x0b\xd6\xd9\x1f\xe8\xdd\xa3\x7d\x96\xb6\x4a\x6a\xb4\xa9\x9a\xb4\xd8\x52\xd6\xb2\x18\xbe\x95\x57\x5f\xa6\x7b\x7a\x56\x45\x16\x69\x43\x67\xc0\x69\xd9\x1d\x27\x56\x77\x09\x26\x9a\xc1\xfe\x97\x1c\x8b\x4a\x83\x15\xf3\xa7\x7a\xe7\x86\xd1\x85\x38\xb1\x5e\xfa\x58\x6a\x71\x43\x39\xcb\x52\x5b\x02\x67\xcd\xe1\xd9\xf7\x99\x55\xd4\xa8\x9f\x2c\x45\x36\xea\xee\xeb\xc0\x0a\x3e\x20\x31\x66\x12\xf9\x5b\xa3\x34\xc6\xed\xb0\xad\xa7\x14\x19\x3c\x67\x3b\x71\x8e\x05\xea\x32\x7c\xd2\xc9\x44\xe2\x21\x8d\x27\x89\xc4\x89\x97\xbe\xcc\x66\x3a\x50\xfe\x7f\x2e\xd3\xd9\xaf\xa4\x3a\x9b\xe7\x3a\x9e\x54\x8c\x2e\x7f\xb9\x8c\x27\x0b\xcf\x21\xb2\x43\x5c\x5c\x0d\x3f\x6f\xaf\xfd\xe1\xc7\x9d\x6b\x1f\xb4\x45\x3e\xf8\xc5\xae\x00\x76\xee\xd9\xce\xf8\x1f\xba\x62\x91\xa7\xfa\x27\x00\x00\xff\xff\x23\xae\xcb\x61\xca\x0c\x00\x00")

func playbookUbBytes() ([]byte, error) {
	return bindataRead(
		_playbookUb,
		"playbook.ub",
	)
}

func playbookUb() (*asset, error) {
	bytes, err := playbookUbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "playbook.ub", size: 3274, mode: os.FileMode(436), modTime: time.Unix(71884800, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesHelloTxtTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\x48\xcd\xc9\xc9\x57\xa8\xae\x56\x50\xaa\xae\x56\xd0\xcb\x4b\xcc\x4d\x55\xa8\xad\x55\x52\xa8\xad\x55\xe4\x02\x04\x00\x00\xff\xff\xe2\x5a\x03\x64\x1b\x00\x00\x00")

func resourcesHelloTxtTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourcesHelloTxtTmpl,
		"resources/hello.txt.tmpl",
	)
}

func resourcesHelloTxtTmpl() (*asset, error) {
	bytes, err := resourcesHelloTxtTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/hello.txt.tmpl", size: 27, mode: os.FileMode(436), modTime: time.Unix(71884800, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go.mod":                   goMod,
	"playbook.ub":              playbookUb,
	"resources/hello.txt.tmpl": resourcesHelloTxtTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"go.mod":      &bintree{goMod, map[string]*bintree{}},
	"playbook.ub": &bintree{playbookUb, map[string]*bintree{}},
	"resources": &bintree{nil, map[string]*bintree{
		"hello.txt.tmpl": &bintree{resourcesHelloTxtTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
