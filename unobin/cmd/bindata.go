// Code generated for package cmd by go-bindata DO NOT EDIT. (@generated)
// sources:
// cmd/templates/go.mod
// cmd/templates/playbook.ub
// cmd/templates/resources/hello.txt.tmpl
package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goMod = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcd\x4f\x29\xcd\x49\x55\xa8\xae\x56\xd0\xf3\xcc\x2d\xc8\x2f\x2a\x09\x48\x2c\xc9\x50\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xc8\x9d\xfe\x34\x19\x00\x00\x00")

func goModBytes() ([]byte, error) {
	return bindataRead(
		_goMod,
		"go.mod",
	)
}

func goMod() (*asset, error) {
	bytes, err := goModBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go.mod", size: 25, mode: os.FileMode(420), modTime: time.Unix(71884800, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _playbookUb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x6f\xdc\x38\x0c\xbd\xfb\x57\x30\x08\x0a\x27\x40\x32\xd3\x43\xb1\x87\xb9\x15\x3d\x6c\xb7\x87\x6d\x81\xf6\x56\x14\x0b\x59\xa6\x63\x6d\x64\xd1\x15\xa9\xc9\x4c\x83\xfc\xf7\x85\x3e\xec\x8c\x27\xc9\x26\xdd\xee\xa1\xcd\x44\xa1\xde\x23\x1f\x9f\xc8\x71\x6a\xc0\x0d\xd4\xb7\xb7\xb0\xfa\xe4\xe9\x6f\xd4\x02\x77\x77\x75\xd5\x22\x6b\x6f\x46\x31\xe4\x36\x50\xbf\x85\xc6\x38\xe5\xf7\x30\x5a\xb5\x6f\x88\xae\xeb\xaa\x3a\x85\x3f\x86\x91\xbc\x30\x28\x8f\x30\x50\x1b\x2c\x32\xdc\x78\x23\x82\x0e\x8c\x83\xdf\x69\x05\x5f\x7a\x04\x93\xc2\xe0\x1a\xf7\x0c\x83\x12\xdd\x83\xf4\xf7\x17\x8c\xab\x4e\x41\x14\x5f\x73\x8e\x1e\x95\xf4\x20\x94\x62\xca\x4d\xc3\xe9\x37\x56\x03\x82\xe2\x0c\x7d\x01\x4d\x10\xb8\x31\x72\x88\x16\x91\xf6\x23\x82\x1a\x47\x74\x2d\xb6\x31\x5a\x01\x87\xae\x33\xbb\x55\x95\xd1\x78\x03\xb7\x15\x80\x1e\xda\x0d\xd4\x57\x46\xfa\xd0\xac\x34\x0d\x6b\x6d\x29\xb4\x0d\x31\xaf\x83\xa3\xc6\xb8\x75\x49\x70\xad\x69\x18\x94\x6b\x57\xef\xf2\xcf\xba\x02\x10\x1c\x46\xab\x04\x5f\x88\xd0\x19\x8b\xeb\xe9\xce\xea\x4b\xf9\x50\x57\x77\x51\xc4\xa4\x90\x1b\x83\x00\xeb\x1e\x07\x15\xab\x55\xf0\xe1\xf3\xc7\x3f\xa7\x83\x8e\x3c\x6c\x95\x35\xad\x12\xe3\xae\x4a\xf0\x56\x79\xa3\x1a\x8b\x93\x6a\xa5\x2f\xd5\x29\xdc\x18\x6b\xc1\x91\x80\xd2\x1a\x47\x39\x8e\x07\xe9\x95\x40\x4b\x29\xa4\xc0\xe2\xaa\x4a\x51\x97\x99\x31\x2b\x14\x95\xdc\x40\x4d\x4d\xf4\x44\xac\x7a\xf4\x34\xa2\x17\x83\x45\x42\x80\xec\x9d\xdb\x29\x94\xc5\x1b\x77\x55\xc3\x5d\x05\xe9\x9f\xc7\xef\xc1\x78\x6c\x37\xf0\xb5\x8e\xa1\xf5\xb7\x0a\x40\xb5\xad\x89\xae\x52\xf6\xd3\x01\x5e\xa7\x2c\x63\x14\x24\x3a\x01\xbe\xf6\x68\x2d\x41\xe7\x69\x00\xe5\x8e\x2a\x38\xf9\x96\xd8\x4f\xe1\xa6\x47\x77\x89\x3b\xd4\x41\xf0\xec\x1c\x7c\x70\x0c\x26\xd9\xf1\x2a\x0c\xe8\x04\x94\x6b\x81\x83\xd6\x88\x2d\x83\xe9\x92\x51\x70\x67\x04\x58\x94\x04\x06\xfc\x1e\x94\x65\x78\xbd\xaa\x20\x81\x6d\x96\x90\xb5\xf8\x80\xf5\x79\x95\xc8\xa2\xc8\xb1\x06\xa0\xee\xc0\x70\x17\xd1\x47\x17\x30\x04\x96\x62\x6d\x72\x73\xc8\x81\xef\x23\x43\xbe\xb1\x89\x37\x66\xc4\x8e\xfc\xa0\x04\xba\xe0\x74\xd4\x04\x1a\xec\xd5\x16\x19\xac\xb9\x46\xe0\xd1\x1b\x27\x5d\xbc\xab\xfc\x55\x14\x1d\x4a\x6a\x9b\x72\xf1\xac\x46\xdd\x13\xbc\x4f\x6a\xbd\xe2\x93\x1a\x94\xdb\x5f\x6e\x95\x3f\xcb\x7a\x9f\x9f\xc3\xdd\xbd\xa8\x29\x36\x26\x26\x3e\x48\x9f\x55\x7c\x2c\x29\x0a\x12\xf5\x4e\x55\x18\x86\xe2\xff\xec\xab\x06\x21\x70\x7e\x58\x32\x1b\x57\x28\x09\xf7\x57\xc9\x2e\x01\x19\x97\x02\x1c\xee\x24\xbd\xee\x47\xab\xc8\xe9\x27\x99\x0f\x13\xf5\xc1\x81\x9d\x89\xa7\x76\xbf\x47\x8f\x17\xc7\x4d\x0f\x8c\x39\x93\x7a\x59\x5d\x9d\x48\x4b\x29\x35\x27\x80\x9a\xa5\xa5\x20\x35\x28\x11\x6f\x9a\x20\x98\xe7\xc3\x54\xa0\x50\xf4\xd0\x13\x66\xc8\xde\xbe\xcc\x80\x67\x0f\xd8\x26\xec\xf3\x64\x97\xa5\xaa\x0f\xcb\xb6\x0c\xeb\x7f\xa9\x38\x7a\x35\xce\x0c\x68\x09\xd9\xd5\x12\x4d\xcb\xf2\x58\xc3\x0a\x74\x7a\x8c\x47\xf0\xe9\x2c\x36\xd4\x70\x19\x09\xb8\x45\x1f\x2b\x04\x36\x4e\x23\xac\x41\xd9\x1b\xb5\xe7\x8c\x9e\x2c\x0a\xa0\x3d\x2a\x89\x0f\xb2\x4e\x08\x47\x29\xde\x6b\x15\x38\x8e\x22\xe5\x48\x7a\xf4\xd3\x69\xcd\x45\xf0\x17\xa7\xba\xb0\xf1\xc7\xd9\x77\x87\x52\xf0\x06\x5e\x71\x36\xf6\x24\xfe\x52\xad\x85\xf8\x8b\x94\x71\x37\x46\x08\x35\xcf\xeb\x65\x5e\xd3\xe9\x51\x72\xa7\xc0\x5e\xc7\x29\xec\xd1\x2a\x31\x5b\x9c\xb6\xd1\xbc\xfb\xe2\x9f\x98\x82\xd7\xc8\xd0\x1a\x8f\x5a\xc8\xef\xb3\x7e\xec\xf5\x06\xea\x34\xbe\x56\xb2\x93\x95\x0c\xa3\x9d\x5a\xd1\x22\xcb\x63\xb8\x3a\x78\x1f\xc7\xd5\x0d\xf9\xeb\xa8\xea\x0c\x09\xe4\xe3\xf8\x53\x0d\x93\x8d\x6e\x8d\xab\x31\xd3\x44\xa8\x43\x9e\x4c\x31\x50\x1b\xdb\xff\xfa\xb7\x37\x6f\xf2\xc1\x56\xf9\xe4\xbc\xb2\xe3\x3f\x10\x4e\xc3\x39\xad\x9e\xcf\x66\x18\x2d\xe6\x97\x92\x36\xa9\x47\xd6\x01\xd3\xdc\x2c\xde\xd0\x56\xc5\x27\xb6\xaa\x4e\xe1\x2d\xf0\x41\x7c\x9f\x9e\x4e\x96\x32\x5f\xf0\x57\x9c\x3e\x38\x02\x0e\x4d\xda\xe8\xd3\x14\x18\x94\x71\xd0\x50\xbb\x5f\x4d\x66\x2a\x44\xd0\x29\x63\x83\xc7\xa7\x86\xd1\xe4\xdd\x92\x8d\x47\x09\xde\x81\x23\xf7\x03\x3d\x3d\xfa\xb4\xd2\x22\x49\x6f\x6b\xaa\x26\xed\xb2\xc4\x5a\x76\xc1\xb7\xd2\xe8\x25\xdd\xd3\xe3\x29\x66\x91\x96\x72\x06\x9c\x25\x9c\xb2\xba\x27\x98\xd2\x0c\xee\xbf\x70\x2c\x2a\x0d\x6e\xd1\xaa\x77\x34\x8c\x14\xe2\x90\x7a\x69\xb3\xf4\xe2\x86\x26\x27\xca\x38\x06\x72\x76\xff\x6c\x7f\x0e\x2a\x6a\xf4\x4f\x96\xa2\x1a\x7d\xff\x0d\x60\x46\x9b\xf0\xe6\xac\x62\x09\xa6\x4c\x94\x74\x32\xd1\x3c\x24\x7a\x92\x2a\x8e\xb1\xf4\x0d\x35\x13\x42\xf9\xff\x39\xa6\x93\x5f\xa1\x3a\x39\xe4\x9a\x4b\xfc\x1a\x7d\xfc\x72\xa1\x66\x93\x1e\x42\x64\x0f\x50\x9c\xf7\x3f\x6f\xa0\xdd\xfe\xc7\xbd\x2f\x1f\x18\x3f\x1f\xfc\xa2\xef\x41\x88\x9e\xf5\xfe\xff\xe0\xfb\x05\x4f\xf5\x4f\x00\x00\x00\xff\xff\x2e\xe6\x52\x86\x9f\x0c\x00\x00")

func playbookUbBytes() ([]byte, error) {
	return bindataRead(
		_playbookUb,
		"playbook.ub",
	)
}

func playbookUb() (*asset, error) {
	bytes, err := playbookUbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "playbook.ub", size: 3231, mode: os.FileMode(436), modTime: time.Unix(71884800, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesHelloTxtTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\x48\xcd\xc9\xc9\x57\xa8\xae\x56\x50\xaa\xae\x56\xd0\xcb\x4b\xcc\x4d\x55\xa8\xad\x55\x52\xa8\xad\x55\xe4\x02\x04\x00\x00\xff\xff\xe2\x5a\x03\x64\x1b\x00\x00\x00")

func resourcesHelloTxtTmplBytes() ([]byte, error) {
	return bindataRead(
		_resourcesHelloTxtTmpl,
		"resources/hello.txt.tmpl",
	)
}

func resourcesHelloTxtTmpl() (*asset, error) {
	bytes, err := resourcesHelloTxtTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/hello.txt.tmpl", size: 27, mode: os.FileMode(436), modTime: time.Unix(71884800, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go.mod":                   goMod,
	"playbook.ub":              playbookUb,
	"resources/hello.txt.tmpl": resourcesHelloTxtTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"go.mod":      &bintree{goMod, map[string]*bintree{}},
	"playbook.ub": &bintree{playbookUb, map[string]*bintree{}},
	"resources": &bintree{nil, map[string]*bintree{
		"hello.txt.tmpl": &bintree{resourcesHelloTxtTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
