name: '{{ .Project }}'
description: 'A binary playbook'

# Imports are modules written in Go. The import keys match the modules in
# tasks. The path to the import is the same as in Go, but with the module
# type appended as a suffix.
imports: {
  cmd: 'github.com/cloudboss/unobin/modules/command.Command'
  template: 'github.com/cloudboss/unobin/modules/file/template.Template'
}

# The input schema is a JSON schema for validating input variables. The playbook
# will not accept input variables that do not validate.
input-schema: {
  type: 'object'
  properties: {
    name: { type: 'string' }
  }
  required: ['name']
  additionalProperties: false
}

task [hello from an input variable!] {
  # when-execute() runs its argument and succeeds if the exit status equals 0.
  when: when-execute('true')

  # The name of the module, cmd, must match one of the import keys.
  module: cmd
  # The format function behaves like sprintf.
  args: { execute: format('echo Hello %s!' any-var('name')) }
}

task [echo the truth] {
  module: cmd
  # The output of this command will be used as the input to when_execute
  # in the next task.
  args: { execute: 'echo true' }
}

task [run ls command] {
  # Here, when-execute() uses the 'echo the truth' task output's
  # 'stdout' attribute as a command to run.
  when: when-execute(string-output('echo the truth' 'stdout'))

  module: cmd
  args: { execute: 'ls /' }
}

task [run ls command if file doesn't exist] {
  module: cmd
  args: {
    execute: 'ls /'
    # This will never run since / always exists.
    creates: '/'
  }
}

task [run a command using another command's output] {
  module: cmd
  args: {
    execute: format('echo Output of ls command is: %s' any-output('run ls command' 'stdout'))
  }
}

task [expand a template] {
  module: template
  args: {
    # src is relative to the playbook's resources directory.
    src: 'hello.txt.tmpl'
    # dest is relative to the current working directory or an absolute path.
    dest: 'hello.txt'
    mode: '0644'
    vars: { name: string-var('name') }
  }
}

# Simple task with rescue and always clauses.
# A simple task has a module and args and no subtasks in the main body.
task [rescue a failure] {
  module: cmd
  # This will always return nonzero
  args: { execute: 'false' }
} rescue {
  task [succeed] {
    module: cmd
    args: { execute: 'echo this is a rescue' }
  }
} always {
  task [always run] {
    module: cmd
    args: { execute: 'echo this will always run' }
  }
}

# Compound task with rescue and always clauses.
# A compound task contains only subtasks in the main body.
task {
  task [abc] {
    module: cmd
    args: { execute: 'echo abc' }
  }
  # Nested tasks are allowed.
  task {
    task [compound within a compound] {
      module: cmd
      args: { execute: 'echo inception' }
    }
    task [compound within a compound!] {
      module: cmd
      args: { execute: 'echo inception!' }
    }
  }
  task [fail] {
    module: cmd
    args: { execute: 'false' }
  }
  task [this won't run] {
    module: cmd
    args: { execute: 'echo xyz' }
  }
} rescue {
  task [rescue] {
    module: cmd
    args: { execute: 'echo this is a rescue too' }
  }
} always {
  task [always] {
    module: cmd
    args: { execute: 'echo this will always run too' }
  }
}
